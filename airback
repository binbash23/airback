#!/bin/bash
#
# 20200404 Jens Heine
# 20200413 Jens Heine: FTPS mode enabled
# 20200710 Jens Heine <binbash@gmx.net>
#          Dennis Brossat <dennis.brossat@email.de>
#          Benjamin Heine <benjaminheine@gmx.net>
# 20250106 Jens Heine: -k option to clean hanging curlftpfs process
#
# airback - backup your mobile device over wifi
#
#set -e
#set -x

#
# VARIABLES
#
# Base directory for airback
VERSION="20250205"
AIRBACK_ROOT_DIR="$HOME/airback"
AIRBACK_CONFIG_FILE="${AIRBACK_ROOT_DIR}/airback.conf"
DEBUG="0"
LOGFILE="${AIRBACK_ROOT_DIR}/airback.log"
USE_LOGFILE="1"
RUN_AS_DAEMON_OVERRIDE="0"
REMOTE_IS_ALREADY_MOUNTED="0"
VERBOSITY=""
#RSYNC_CMD="nice -n 20 rsync -rultR --chmod=774"
RSYNC_CMD='nice -n 20 rsync -rultR --chmod=774 --exclude .thumbnails --exclude .trash --exclude .trashed-* '
NMAP_CMD="nice -n 20 nmap "
USAGE_INFO_TEXT="

        airback by Jens Heine <binbash@gmx.net> 2020
                   and Dennis Brossat <dennis.brossat@email.de>
                   and Benjamin Heine <benjaminheine@gmx.net>

USAGE

        airback OPTIONS

OPTIONS
        -c              : Show config file
        -C              : Create new config file with user input
        -d              : Show debug infos, be verbose
	-D              : Run as daemon even if deactivated in config file
        -h              : Show usage information
        -k              : Kill hanging curlftpfs and force umount of mountpoint
	-l [LOGFILE]    : Use LOGFILE as logfile (to use with multiple mobiles)
	-n              : Do not use logfile
	-S [VARIABLE]   : set VARIABLE to set in config file (use together with -V)
	-t              : Tail airback logfile
	-u [CONFIGFILE] : Use CONFIGFILE as airback configuration. Use this option 
	                  to run airback with multiple mobiles.
	-V [VALUE]      : set VALUE to set variable to value in config file (use together with -S)
        -v              : Show program version

EXAMPLES

	1) Show help and usage info:
		> airback -h
	2) Show config file:
		> airback -c
	3) Configure airback:
		> airback -C
	4) Start airback in debug/verbose mode:
		> airback -d
	5) Set mobile backup interval to 30 sec:
		> airback -S BACKUP_INTERVAL_SEC -V 30
	6) Create a new configfile for another mobile:
                > airback -u /home/melvin/airback/airback2.conf -l /home/melvin/airback/airback2.log -C	
	6) Run airback with a custom config- and logfile
	   (use one instance of airback for each of your mobiles):
	        > airback -u /home/user/airback/airback_mobile2.conf -l /home/user/airback/airback_mobile2.log
	        > airback -u /home/user/airback/airback_mobile3.conf -l /home/user/airback/airback_mobile3.log

"
DEFAULT_CONFIG_FILE='#
# airback.conf
#
# 2020 by jens heine <binbash@gmx.net>
#         Dennis Brossat <dennis.brossat@email.de>
#         Benjamin Heine <benjaminheine@gmx.net>
#
# Configuration file for airback - backup your mobile device over wifi
#

# Local folder where remote device will be mounted
LOCAL_MOBILE_MOUNTPOINT_BASE="${AIRBACK_ROOT_DIR}/mnt"
# Local folder where remote files will be saved
LOCAL_BACKUP_TARGET_BASE_DIR="${AIRBACK_ROOT_DIR}/backup"
# Remote access configuration
# Note: Enable implicit ssl mode on server
MOBILE_HOST="192.168.1.21"
MOBILE_PORT="10000"
MOBILE_USER="ftpuser"
MOBILE_USER_PASS="pass"
# Which folders from your mobile should be synced?
MOBILE_FOLDERS_TO_BACKUP="DCIM/Camera DCIM/Screenshots Pictures Movies Music Telegram WhatsApp Signal"
# Run airback as a daemon who polls for the mobile
RUN_AS_DAEMON="1"
# Polling interval to find the mobile in seconds
SEARCH_MOBILE_INTERVAL_SEC="5"
# Interval for doing backups
BACKUP_INTERVAL_SEC="600"
SLEEP_TIME_TO_WAIT_FOR_MOBILE_FLUSH="1"
'


#
# FUNCTIONS
#

function cleanUpAndExit() {
	echo
	logInfo "STRG-C detected. Cleaning up..."
	unmountMobile
	logInfo "Exiting."
	exit 0
}

trap cleanUpAndExit SIGINT

function logInfo() {
	echo "INFO  - `date "+%Y%m%d %H:%M:%S"` : ${1}" | ( [ "${USE_LOGFILE}" -eq 1 ] && tee -a ${LOGFILE} || cat ) 
}

function logDebug() {
	[ "${DEBUG}" -eq 0 ] && return
	echo "DEBUG - `date "+%Y%m%d %H:%M:%S"` : ${1}" | ( [ "${USE_LOGFILE}" -eq 1 ] && tee -a ${LOGFILE} || cat ) 
}

# Args: IP PORT
checkForRunningPortServer() {
	logDebug "Checking for mobile..."
	[ "$1" -a "$2" ] || {
		logInfo "Host or port missing."
		exit 1
	}
	${NMAP_CMD} ${1} -p ${2} | grep "open" >/dev/null 2>&1
	RET_VAL=$?
	[ "${RET_VAL}" -eq 0 ] && {
		logDebug "Mobile "$1" port "$2" found."
		return 0
	}
	logDebug "Mobile "$1" port "$2" not found."
	return 1
}

function checkLocalMobileMountpointBase() {
	[ -d ${LOCAL_MOBILE_MOUNTPOINT_BASE} ] || {
        	logDebug "Local mobile mountpoint base folder not found: ${LOCAL_MOBILE_MOUNTPOINT_BASE}"
	        mkdir -p ${LOCAL_MOBILE_MOUNTPOINT_BASE} >/dev/null 2>&1
	        RET_VAL=$?
	        [ $RET_VAL -ne 0 ] && {
        	        logInfo "Error creating local mobile mountpoint base folder."
                	exit 1
	        }
	        logInfo "Local local mobile mountpoint base folder ${LOCAL_MOBILE_MOUNTPOINT_BASE} created."
	}
}

function checkLocalBackupTargetBaseDir() {
	[ -d ${LOCAL_BACKUP_TARGET_BASE_DIR} ] || {
	        logDebug "Local backup target base folder not found: ${LOCAL_BACKUP_TARGET_BASE_DIR}"
	        mkdir -p ${LOCAL_BACKUP_TARGET_BASE_DIR} >/dev/null 2>&1
	        RET_VAL=$?
	        [ $RET_VAL -ne 0 ] && {
	                logInfo "Error creating local backup target base folder ${LOCAL_BACKUP_TARGET_BASE_DIR}."
	                exit 1
	        }
	        logInfo "Local backup target base folder ${LOCAL_BACKUP_TARGET_BASE_DIR} created."
	}
}

function unmountMobile() {
	logDebug "Trying to unmount mobile."
	df -h|grep ${LOCAL_MOBILE_MOUNTPOINT_BASE} 2>&1 >/dev/null
	REMOTE_IS_ALREADY_MOUNTED=$?
	if [ "$REMOTE_IS_ALREADY_MOUNTED" -eq 0 ];then
		logDebug "Unmounting mobile..."
		sleep ${SLEEP_TIME_TO_WAIT_FOR_MOBILE_FLUSH}
		fusermount -z -u ${LOCAL_MOBILE_MOUNTPOINT_BASE} 2>&1 | ( [ "${USE_LOGFILE}" -eq 1 ] && tee -a ${LOGFILE} || cat ) 
	else
		logDebug "Mobile is not mounted."
		return
	fi
}

function mountMobile() {
	logDebug "Trying to mount mobile."
	df -h|grep ${LOCAL_MOBILE_MOUNTPOINT_BASE} 2>&1 >/dev/null
	REMOTE_IS_ALREADY_MOUNTED=$?
	if [ "$REMOTE_IS_ALREADY_MOUNTED" != 0 ];then
		curlftpfs ${VERBOSITY} -r -o ssl,no_verify_hostname,no_verify_peer,user=${MOBILE_USER}:${MOBILE_USER_PASS} ftps://${MOBILE_HOST}:${MOBILE_PORT}/ ${LOCAL_MOBILE_MOUNTPOINT_BASE} 2>&1 | ( [ "${USE_LOGFILE}" -eq 1 ] && tee -a ${LOGFILE} || cat ) 
		RET_VAL=$?
		[ "$RET_VAL" -ne 0 ] && {
			logDebug "Mobile could not be mounted."
			return 1
		}
		logDebug "Mobile mounted."
		return 0
	else
		logDebug "Mobile is already mounted."
		return 0
	fi
}

#
# Warning: be in the LOCAL_MOBILE_MOUNTPOINT_BASE dir!
#
function runRsync() {
	REMOTE_DIR_TO_BACKUP="${1}"
	logDebug "Trying to sync folder: ${REMOTE_DIR_TO_BACKUP}"
	[ ! -d "${REMOTE_DIR_TO_BACKUP}" ] && {
		logDebug "Remote folder: ${REMOTE_DIR_TO_BACKUP} not found."
		logDebug "Skipping sync."
		return
	}
	logDebug "Syncing remote folder: ${REMOTE_DIR_TO_BACKUP} to ${LOCAL_BACKUP_TARGET_BASE_DIR}..."
	${RSYNC_CMD} ${VERBOSITY} ${REMOTE_DIR_TO_BACKUP} ${LOCAL_BACKUP_TARGET_BASE_DIR} 2>&1 | ( [ "${USE_LOGFILE}" -eq 1 ] && tee -a ${LOGFILE} || cat ) 
}

function doBackup() {
	mountMobile || {
		logInfo "Error: mounting mobile failed."
		return 1
	}
	cd ${LOCAL_MOBILE_MOUNTPOINT_BASE} || {
		logInfo "Error changing into local mount folder: ${LOCAL_MOBILE_MOUNTPOINT_BASE}"
		exit 1
	}
	[ "${MOBILE_FOLDERS_TO_BACKUP}" ] || {
		logInfo "Error: There are no folders to backup from the mobile in the config file."
		exit 1
	}

	for FOLDER in ${MOBILE_FOLDERS_TO_BACKUP}; do
		runRsync "${FOLDER}"
	done

	cd - 2>&1 >/dev/null
	logDebug  "Unmounting mobile filesystem..."
	unmountMobile	
	RET_VAL=$?
	[ $RET_VAL -ne 0 ] && {
		logDebug "Error unmounting mobile."
		return
	}
	logDebug "Mobile unmounted."
}

function createDefaultConfigFile() {
	[ -d ${AIRBACK_ROOT_DIR} ] || {
		logDebug "Root folder not found."
		logInfo "Creating root folder: ${AIRBACK_ROOT_DIR}"
		mkdir -p ${AIRBACK_ROOT_DIR} 2>&1 | ( [ "${USE_LOGFILE}" -eq 1 ] && tee -a ${LOGFILE} || cat ) 
	}
#	[ -r ${AIRBACK_CONFIG_FILE} ] && {
#		logInfo "Found existing configfile: ${AIRBACK_CONFIG_FILE}"
#		BACKUP_CONFIG_FILE=${AIRBACK_CONFIG_FILE}_`date "+%Y%m%d%H%M%S"`
#		logInfo "Creating backup file: ${BACKUP_CONFIG_FILE}"
#		mv ${AIRBACK_CONFIG_FILE} ${BACKUP_CONFIG_FILE} 2>&1 | ( [ "${USE_LOGFILE}" -eq 1 ] && tee -a ${LOGFILE} || cat ) 
#	}
#	logInfo "Creating default conf file ${AIRBACK_CONFIG_FILE}"
	if [ ! -f "${AIRBACK_CONFIG_FILE}" ];then
		echo "${DEFAULT_CONFIG_FILE}" > ${AIRBACK_CONFIG_FILE}
		logInfo "Default config file created."
	else
		logInfo "Create default config file: airback config file already exists."
	fi
}

function checkForCommand() {
	[ ! "${1}" ] && {
		logDebug "Error: no command given to check."
		return 0
	}
	logDebug "Checking if ${1} is installed."
        which "${1}" >/dev/null 2>&1
        RET_VAL=$?
        [ "$RET_VAL" -ne 0 ] && {
                logInfo "Error: ${1} not found." 
                logInfo "Please install ${1}. For example: apt-get install ${1}" 
		return 1
        }
	logDebug "Success: command ${1} is installed."
	return 0
}

#
# check if all needed tools are available
#
function checkDependencies() {
	DEPENDENCY_ERRORS=0
	logDebug "Checking dependencies..."

	checkForCommand "rsync"
	let DEPENDENCY_ERRORS=$DEPENDENCY_ERRORS+$?
	checkForCommand "nice"
	let DEPENDENCY_ERRORS=$DEPENDENCY_ERRORS+$?
	checkForCommand "nmap"
	let DEPENDENCY_ERRORS=$DEPENDENCY_ERRORS+$?
	checkForCommand "curlftpfs"
	let DEPENDENCY_ERRORS=$DEPENDENCY_ERRORS+$?

	[ $DEPENDENCY_ERRORS -eq 0 ] && {
		logDebug "Dependency check OK."
		return 0
	} 
	logDebug "Dependency check had errors."
	return 1
}

function showUsage() {
	echo "$USAGE_INFO_TEXT"
}

function showVersionInfo() {
	echo
	echo "airback version: $VERSION"
	echo
}

function showConfigFile() {
	echo 
	echo " Print airback configuration file"
	echo " Filename: ${AIRBACK_CONFIG_FILE}"
	echo
	[ -f "${AIRBACK_CONFIG_FILE}" ] || {
		logInfo "Config file does not exist."
		return 1
	}
	cat ${AIRBACK_CONFIG_FILE}
}

function setVariableInConfigFile() {
        [ ! "${1}" ] && {
                logDebug "Error: Variable name missing."
                return 1
        }
        [ ! "${2}" ] && {
                logDebug "Error: Value for variable missing."
                return 0
#                return 1
        }
	grep "${1}" "${AIRBACK_CONFIG_FILE}" >/dev/null 2>&1
	RET_VAL=$?
	[ "$RET_VAL" -ne 0 ] && {
		logDebug "ERROR: Variable ${1} not found in configfile ${AIRBACK_CONFIG_FILE}"
		return 1
	}
	logDebug "Setting new value for variable in config file:"
	logDebug "Variable : ${1}"
	logDebug "Value    : ${2}"
	SED_PARAM="s#${1}=.*#${1}=\"${2}\"#g"
	logDebug "SED_PARAM=$SED_PARAM"
	sed -i "$SED_PARAM" ${AIRBACK_CONFIG_FILE} 2>&1 | tee -a ${LOGFILE}
	RET_VAL=$?
	if [ "$RET_VAL" -eq 0 ];then
		logDebug "Variable ${1} set to ${2} in configfile ${AIRBACK_CONFIG_FILE}."
		return 0
	else
		logInfo "Error setting variable ${1} to ${2} in configfile ${AIRBACK_CONFIG_FILE}." 
		return 1
	fi
}

function setVariablesInConfigFileFromUserInput() {
	[ -f ${AIRBACK_CONFIG_FILE} ] || {
		logInfo "No config file found. Variables can not be set!"
		return 1
	}
	echo 
	showConfigFile
	echo
	echo " Please set the variables for your config file."
	echo " If you want to leave a variable unchanged, just press enter."
	echo
	read -p " Enter the IP of your mobile                               : " U_MOBILE_HOST
	read -p " Enter the port mobile ftp service                         : " U_MOBILE_PORT
	read -p " Enter the ftp username                                    : " U_MOBILE_USER
	read -sp " Enter the ftp password                                    : " U_MOBILE_USER_PASS
	echo
        echo    " Enter mobile folders to be backed up. Leave empty for"
        read -p	"  default values (Pictures, videos, whatsapp, ...)         : " U_MOBILE_FOLDERS_TO_BACKUP
	echo    " Enter the local path where your mobile filesystem"
        read -p "  will be mounted to (it will be created if needed)        : " U_LOCAL_MOBILE_MOUNTPOINT_BASE
	echo    " Enter the local path where the files from your mobile"
        read -p "  will be written to (it will be created if needed)        : " U_LOCAL_BACKUP_TARGET_BASE_DIR
	echo    " Should airback run in deamon mode? (0 or 1 default is 1)"
	echo    "  If set to 1 airback will periodically check if your"
        read -p "  mobile is reachable in the network                       : " U_RUN_AS_DAEMON
	read -p " Set interval in s to search for your mobile (default 30)  : " U_SEARCH_MOBILE_INTERVAL_SEC
	read -p " Set backup interval in s  (default 600)                   : " U_BACKUP_INTERVAL_SEC
	echo
	# set default values
#	U_RUN_AS_DAEMON=${U_RUN_AS_DAEMON:-1}
#	U_SEARCH_MOBILE_INTERVAL_SEC=${U_SEARCH_MOBILE_INTERVAL_SEC:-30}
#	U_BACKUP_INTERVAL_SEC=${U_BACKUP_INTERVAL_SEC:-600}
	logDebug "U_MOBILE_HOST                  : $U_MOBILE_HOST"
	logDebug "U_MOBILE_PORT                  : $U_MOBILE_PORT"
	logDebug "U_MOBILE_USER                  : $U_MOBILE_USER"
	logDebug "U_MOBILE_USER_PASS             : $U_MOBILE_USER_PASS"
	logDebug "U_MOBILE_FOLDERS_TO_BACKUP     : $U_MOBILE_FOLDERS_TO_BACKUP"
	logDebug "U_LOCAL_MOBILE_MOUNTPOINT_BASE : $U_LOCAL_MOBILE_MOUNTPOINT_BASE"
	logDebug "U_LOCAL_BACKUP_TARGET_BASE_DIR : $U_LOCAL_BACKUP_TARGET_BASE_DIR"
	logDebug "U_RUN_AS_DAEMON                : $U_RUN_AS_DAEMON"
	logDebug "U_SEARCH_MOBILE_INTERVAL_SEC   : $U_SEARCH_MOBILE_INTERVAL_SEC"
	logDebug "U_BACKUP_INTERVAL_SEC          : $U_BACKUP_INTERVAL_SEC"
#	[ ! "$U_MOBILE_HOST" -o ! "$U_MOBILE_PORT" -o ! "$U_MOBILE_USER" \
# 	  -o ! "$U_MOBILE_USER_PASS" -o ! "$U_LOCAL_MOBILE_MOUNTPOINT_BASE" \
#	  -o ! "$U_LOCAL_BACKUP_TARGET_BASE_DIR" -o ! "$U_RUN_AS_DAEMON" \
#	  -o ! "$U_SEARCH_MOBILE_INTERVAL_SEC" \
#	  -o ! "$U_BACKUP_INTERVAL_SEC" ] && {
#		logInfo "Error: Variables must not be empty." 
#		return 1
#	}
	logDebug "Setting variables in config file..."
	CONFIG_FILE_ERRORS=0
	setVariableInConfigFile "MOBILE_HOST" "${U_MOBILE_HOST}"
        let CONFIG_FILE_ERRORS=$CONFIG_FILE_ERRORS+$?
	setVariableInConfigFile "MOBILE_PORT" "${U_MOBILE_PORT}"
        let CONFIG_FILE_ERRORS=$CONFIG_FILE_ERRORS+$?
	setVariableInConfigFile "MOBILE_USER" "${U_MOBILE_USER}"
        let CONFIG_FILE_ERRORS=$CONFIG_FILE_ERRORS+$?
	setVariableInConfigFile "MOBILE_USER_PASS" "${U_MOBILE_USER_PASS}"
        let CONFIG_FILE_ERRORS=$CONFIG_FILE_ERRORS+$?
	setVariableInConfigFile "MOBILE_FOLDERS_TO_BACKUP" "${U_MOBILE_FOLDERS_TO_BACKUP}"
        let CONFIG_FILE_ERRORS=$CONFIG_FILE_ERRORS+$?
	setVariableInConfigFile "LOCAL_MOBILE_MOUNTPOINT_BASE" "${U_LOCAL_MOBILE_MOUNTPOINT_BASE}"
        let CONFIG_FILE_ERRORS=$CONFIG_FILE_ERRORS+$?
	setVariableInConfigFile "LOCAL_BACKUP_TARGET_BASE_DIR" "${U_LOCAL_BACKUP_TARGET_BASE_DIR}"
        let CONFIG_FILE_ERRORS=$CONFIG_FILE_ERRORS+$?
	setVariableInConfigFile "RUN_AS_DAEMON" "${U_RUN_AS_DAEMON}"
        let CONFIG_FILE_ERRORS=$CONFIG_FILE_ERRORS+$?
	setVariableInConfigFile "SEARCH_MOBILE_INTERVAL_SEC" "${U_SEARCH_MOBILE_INTERVAL_SEC}"
        let CONFIG_FILE_ERRORS=$CONFIG_FILE_ERRORS+$?
	setVariableInConfigFile "BACKUP_INTERVAL_SEC" "${U_BACKUP_INTERVAL_SEC}"
        let CONFIG_FILE_ERRORS=$CONFIG_FILE_ERRORS+$?
	[ $CONFIG_FILE_ERRORS -eq 0 ] && {
		logDebug "Setting variables done."
		return 0
        }
	logDebug "Setting variables done with errors." 
	logDebug "Please check config file manually." 
	return 1
}


function kill_hanging_mount() {
    echo "Trying to kill curlftpfs process(es)..."
    sudo /usr/bin/pkill curlftpfs
    echo "Forcing umopunt of mountpoint..."
    sudo /usr/bin/umount --force $LOCAL_MOBILE_MOUNTPOINT_BASE
}


###################################################################################################
#
# MAIN
#
###################################################################################################

#
# Evaluate arguments
#
ACTION=""
while getopts "kl:u:cCdDhnqS:tvV:" options;do
	case "$options" in
		l) LOGFILE="${OPTARG}"
		   logDebug "Using custom log file: ${LOGFILE}"
		   ;;
		u) AIRBACK_CONFIG_FILE="${OPTARG}"
		   logDebug "Using custom config file: ${AIRBACK_CONFIG_FILE}"
		   ;;
		c) showConfigFile
		   echo
		   exit 0
		   ;;
		C) ACTION="CREATE_CONFIGFILE"
		   ;;
		d) logDebug "Debug mode enabled."
		   DEBUG=1
		   VERBOSITY="-v"
		   ;;
		D) logDebug "Run as daemon override enabled."
		   RUN_AS_DAEMON_OVERRIDE=1
		   ;;
		h) showUsage
		   exit 0
		   ;;
		k) # Load config file and try to free mountpoint
           . ${AIRBACK_CONFIG_FILE}
           kill_hanging_mount
		   echo
		   exit 0
		   ;;
		n) logDebug "Use logfile disabled."
		   USE_LOGFILE=0
		   ;;
		S) ACTION="SET_VARIABLE_IN_CONFIG"
		   VAR_NAME=${OPTARG}
		   ;;
		t) ACTION="TAIL_LOGFILE"
		   ;;
		V) ACTION="SET_VARIABLE_IN_CONFIG"
		   VAR_VALUE=${OPTARG}
		   ;;
		v) showVersionInfo
		   exit 0
		   ;;
		*) showUsage
		   exit 0
		   ;;
	esac
done

#
# Process actions
#
if [ "$ACTION" = "SET_VARIABLE_IN_CONFIG" ];then
	echo
	logDebug "Set variable in config file"
	[ ! "$VAR_NAME" -o ! "$VAR_VALUE" ] && {
		echo "Error: Variable name or value missing." 
		echo
		echo "Try -h for help."
		echo
		exit 1
	}
	setVariableInConfigFile "${VAR_NAME}" "${VAR_VALUE}"
	RET_VAL=$?
	[ "$RET_VAL" -ne 0 ] && {
		echo "Error setting ${VAR_NAME} set to ${VAR_VALUE}." 
		echo
		exit 1
	}
	echo "Variable ${VAR_NAME} set to ${VAR_VALUE}"
	echo
	exit 0
fi

if [ "$ACTION" = "CREATE_CONFIGFILE" ];then
	createDefaultConfigFile
	setVariablesInConfigFileFromUserInput || {
		logInfo "Error: check config file manually: ${AIRBACK_CONFIG_FILE}" 
		exit
	}
	exit 0
fi

if [ "$ACTION" = "TAIL_LOGFILE" ];then
	if [ -f "${LOGFILE}" ];then
		tail -f "$LOGFILE"
		exit 0
	else
		logInfo "Logfile \"${LOGFILE}\" not found."
		exit 1
	fi
fi


#
# Check dependencies
#
checkDependencies || {
	logInfo "Missing dependecies. Please install the missing commands and restart."
	exit 1
}

#
# Check and source config file
#
[ -r ${AIRBACK_CONFIG_FILE} ] || {
	logInfo "Error config file not found: ${AIRBACK_CONFIG_FILE}"
	createDefaultConfigFile
	setVariablesInConfigFileFromUserInput || {
		logInfo "Error: check config file manually: ${AIRBACK_CONFIG_FILE}" 
		exit
	}
}

# Load config file
. ${AIRBACK_CONFIG_FILE}

#
# Check if daemon mode override flag is on
#
[ "${RUN_AS_DAEMON_OVERRIDE}" -eq 1 ] && {
	logDebug "Run as daemon override mode requested on command line."
	RUN_AS_DAEMON=1
}

#
# Check paths
#
checkLocalMobileMountpointBase
checkLocalBackupTargetBaseDir

#
# Go
#
logInfo "Starting airback..."
logInfo "Exit with STRG-C"
while true;do
	checkForRunningPortServer "$MOBILE_HOST" "$MOBILE_PORT"
	RET_VAL=$?
	while [ $RET_VAL -ne 0 ];do
		logDebug "Host not found, sleeping ${SEARCH_MOBILE_INTERVAL_SEC} seconds..."
		sleep ${SEARCH_MOBILE_INTERVAL_SEC}
		checkForRunningPortServer "$MOBILE_HOST" "$MOBILE_PORT"
		RET_VAL=$?
	done
	logDebug "Server found. Starting backup..."
	logInfo "Mobile found. Backing up data..."
	doBackup && logInfo "Backup successful"
	logDebug "Backup done. Sleeping..."
	[ "$RUN_AS_DAEMON" -eq 0 ] && {
		logDebug "Not running in daemon mode. Exiting."
		exit 0
	}	
	logDebug "Sleeping ${BACKUP_INTERVAL_SEC} seconds before next backup."
	sleep ${BACKUP_INTERVAL_SEC}
done
logInfo "Exiting airback."

exit 0


